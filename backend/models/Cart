const mongoose = require('mongoose');

const cartSchema = new mongoose.Schema({
  // Link the cart to a specific user
  user: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User',
    required: true,
    unique: true, // A user should only have one active cart
  },
  // Array to hold the items in the cart
  items: [{
    product: {
      type: mongoose.Schema.Types.ObjectId,
      ref: 'Product',
      required: true,
    },
    quantity: {
      type: Number,
      required: true,
      min: 1, // Quantity must be at least 1
    },
    // Optional: Include a snapshot of the price at the time it was added to the cart
    // This is good practice for auditing and checkout consistency.
    priceAtTimeOfAddition: {
      type: Number,
      required: true,
      min: 0,
    },
    _id: false, // Prevents Mongoose from creating an extra unique ID for each item subdocument
  }],
  // Timestamp for when the cart was last updated (useful for cleanup)
  updatedAt: {
    type: Date,
    default: Date.now,
  },
  // You might want a field to store the total calculation on the backend
  // for quick access and to manage floating-point issues during checkout.
  subTotal: {
    type: Number,
    default: 0,
  }
}, {
  // Automatically manage 'createdAt' and 'updatedAt' fields
  timestamps: true
});

// Middleware to update the 'updatedAt' field whenever an item is added, removed, or quantity changes
cartSchema.pre('save', function (next) {
  this.updatedAt = Date.now();
  next();
});

module.exports = mongoose.model('Cart', cartSchema);